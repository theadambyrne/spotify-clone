{"version":3,"sources":["spotify.js","Login.js","SidebarOption.js","DataLayer.js","Sidebar.js","Header.js","SongRow.js","Body.js","Footer.js","Player.js","App.js","reducer.js","serviceWorker.js","index.js"],"names":["loginURL","join","Login","className","src","alt","href","SidebarOption","text","Icon","DataLayerContext","createContext","DataLayer","initialState","reducer","children","Provider","value","useReducer","useDataLayerValue","useContext","Sidebar","playlists","HomeIcon","SearchIcon","LibraryMusicIcon","items","map","playlist","name","Header","spotify","user","placeholder","type","Avatar","images","url","display_name","SongRow","track","album","artists","artist","Body","dw","description","fontSize","tracks","item","Footer","Grid","container","spacing","xs","Slider","Player","SpotifyWebApi","App","token","dispatch","useEffect","_token","window","location","hash","substring","split","reduce","initial","parts","decodeURIComponent","access_token","setAccessToken","getMe","then","getUserPlaylists","getPlaylist","res","rel","state","action","console","log","Boolean","hostname","match","ReactDOM","render","StrictMode","playing","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.cc75bd64.chunk.js","sourcesContent":["const authEndpoint = \"https://accounts.spotify.com/authorize\";\nconst clientID = \"88c49b9fb37f457385e13e4efc16c196\";\nconst redirectURI = \"https://theadambyrne.github.io/spotify-clone/\";\n\nconst scopes = [\n    \"user-read-currently-playing\",\n    \"user-read-recently-played\",\n    \"user-read-playback-state\",\n    \"user-top-read\",\n    \"user-modify-playback-state\"\n];\n\nexport const getTokenFromResponse = () => {\n    return window.location.hash.substring(1).split('&').reduce((initial, item) => {\n        let parts = item.split('=');\n        initial[parts[0]] = decodeURIComponent(parts[1])\n        return initial;\n    }, {})\n}\n\n\nexport const loginURL = `${authEndpoint}?client_id=${clientID}&redirect_uri=${redirectURI}&scope=${scopes.join('%20')}&response_type=token&show_dialog=true`;","import React from 'react';\nimport './Login.css';\n\nimport { loginURL} from './spotify';\n\nfunction Login() {\n    return (\n        <div className=\"login\">\n            <img src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\" alt=\"\"/>\n            <a href={loginURL}>Login with Spotify</a>\n        </div>\n    );\n}\n\nexport default Login;","import React from 'react';\nimport './SidebarOption.css';\n\n\nfunction SidebarOption({text, Icon}) {\n    return (\n        <div className=\"sidebarOption\">\n            {Icon && <Icon className=\"sidebarOptionIcon\"/>}\n            {Icon ? <h4>{text}</h4> : <p>{text}</p>}\n        </div>\n    );\n}\n\nexport default SidebarOption;","import React, {createContext, useContext, useReducer} from 'react';\n\nexport const DataLayerContext = createContext();\nexport const DataLayer = ({ initialState, reducer, children }) => (\n    <DataLayerContext.Provider value={useReducer(reducer, initialState)}>\n        {children}\n    </DataLayerContext.Provider>\n);\n\nexport const useDataLayerValue = () => useContext(DataLayerContext);","import React from 'react';\nimport './Sidebar.css'\nimport SidebarOption from './SidebarOption';\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport SearchIcon from '@material-ui/icons/Search';\nimport LibraryMusicIcon from '@material-ui/icons/LibraryMusic';\nimport { useDataLayerValue } from './DataLayer';\n\nfunction Sidebar() {\n    const [{playlists}, dispatch] = useDataLayerValue();\n    return (\n        <div className=\"sidebar\">\n            <img src=\"https://getheavy.com/wp-content/uploads/2019/12/spotify2019-830x350.jpg\" alt=\"\" className=\"sidebarLogo\"/>\n            <SidebarOption text=\"Home\" Icon={HomeIcon}/>\n            <SidebarOption text=\"Search\" Icon={SearchIcon}/>\n            <SidebarOption text=\"Library\" Icon={LibraryMusicIcon}/>\n            <br/>\n            <strong className=\"sideBarTitle\">Playlists</strong>\n            <hr/>\n            {playlists?.items?.map((playlist) => (\n                 <SidebarOption text={playlist.name}/>\n            ))}\n            \n        </div>\n    );\n}\n\nexport default Sidebar;","import React from 'react';\nimport './Header.css';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { Avatar } from '@material-ui/core';\nimport { useDataLayerValue } from './DataLayer';\n\nfunction Header({ spotify }) {\n    const [{ user }, dispatch] = useDataLayerValue()\n    return (\n        <div className=\"header\">\n            <div className=\"headerLeft\">\n                <SearchIcon />\n                <input placeholder=\"Search Spotify\" type=\"text\" />\n            </div>\n            <div className=\"headerRight\">\n                <Avatar src={user?.images[0]?.url} alt={user?.display_name} />\n                <h4>{user?.display_name}</h4>\n\n            </div>\n        </div>\n    );\n}\n\nexport default Header;","import React from 'react';\nimport './SongRow.css'\n\n\nfunction SongRow({ track }) {\n    return (\n        <div className=\"songrow\">\n            <img src={track.album.images[0].url} alt=\"\" className=\"songrowAlbum\"/>\n            <div className=\"songrowInfo\">\n                <h1>{track.name}</h1>\n                <p>\n                    {track.artists.map(artist => artist.name).join(\", \")}\n                    {track.album.name}\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default SongRow;","import React from 'react';\nimport './Body.css';\n\nimport Header from './Header';\nimport { useDataLayerValue } from './DataLayer';\n\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport FavouriteIcon from '@material-ui/icons/Favorite';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\n\nimport SongRow from './SongRow';\n\n\nfunction Body({ spotify }) {\n    const [{ dw }, dispatch] = useDataLayerValue()\n    return (\n        <div className=\"body\">\n            <Header spotify={spotify} />\n\n            <div className=\"bodyInfo\">\n    \n                <img src={dw?.images[0].url} alt=\"\" />\n                <div className=\"bodyInfoText\">\n                    <strong>Playlist</strong>\n                    <h2>Discover Weekly</h2>\n                    <p>{dw?.description}</p>\n                </div>\n                \n                <div className=\"bodySongs\">\n                    <div className=\"bodyIcons\">\n                        <PlayCircleFilledIcon className=\"bodeShuffle\"/>\n                        <FavouriteIcon fontSize=\"large\"/>\n                        <MoreHorizIcon />\n                    </div>\n                    {dw?.tracks.items.map(item => (\n                        <SongRow track={item.track} />\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Body;","import React from 'react';\nimport './Footer.css';\n\n\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport ShuffleIcon from '@material-ui/icons/Shuffle';\nimport RepeatIcon from '@material-ui/icons/Repeat';\nimport VolumeDownIcon from '@material-ui/icons/VolumeDown';\nimport PlaylistPlayIcon from '@material-ui/icons/PlaylistPlay';\nimport {Grid, Slider} from '@material-ui/core';\n\nfunction Footer() {\n    return (\n        <div className=\"footer\">\n            <div className=\"footerLeft\">\n                <img src=\"https://static.billboard.com/files/media/Pink-Floyd-Dark-Side-of-the-Moon-album-covers-billboard-1000x1000-compressed.jpg\" alt=\"\" className=\"footerAlbumLogo\"/>\n\n                <div className=\"footerSongInfo\">\n                    <h4>No Song is playing</h4>\n                    <p>...</p>\n                </div>\n            </div>\n            <div className=\"footerCenter\">\n                <ShuffleIcon className=\"footerGreen\"/>\n                <SkipPreviousIcon className=\"footerIcon\"/>\n                <PlayCircleOutlineIcon className=\"footerGreen\" fontSize=\"large\"/>\n                <SkipNextIcon className=\"footerIcon\"/>\n                <RepeatIcon className=\"footerIcon\"/>\n            </div>\n            <div className=\"footerRight\">\n                <Grid container spacing={2}>\n                    <Grid item>\n                        <PlaylistPlayIcon/>\n                    </Grid>\n                    <Grid item>\n                        <VolumeDownIcon />\n                    </Grid>\n                    <Grid item xs>\n                        <Slider/>\n                    </Grid>\n\n                </Grid>\n            </div>\n        </div>\n    );\n}\n\nexport default Footer;","import React from 'react';\nimport './Player.css';\n\nimport Sidebar from './Sidebar';\nimport Body from './Body';\nimport Footer from './Footer';\n\nfunction Player({spotify}) {\n    return (\n        <div className=\"player\">\n            <div className=\"playerBody\">\n                <Sidebar/>\n                <Body spotify={spotify}/>\n            </div>\n            <Footer/>\n        </div>\n    );\n}\n\nexport default Player;","import React, { useEffect } from 'react';\nimport './App.css';\n\nimport Login from './Login';\nimport Player from './Player';\n\nimport { getTokenFromResponse } from './spotify';\nimport SpotifyWebApi from \"spotify-web-api-js\";\n\nimport {useDataLayerValue} from './DataLayer';\n\nconst spotify = new SpotifyWebApi();\n\n\nfunction App() {\n  const [{user, token}, dispatch] = useDataLayerValue();\n  useEffect(() => {\n    const hash = getTokenFromResponse();\n    const _token = hash.access_token;\n    window.location.hash = \"\";\n    if (_token) {\n      dispatch({\n        type:\"SET_TOKEN\",\n        token:_token\n      })\n      \n      spotify.setAccessToken(_token);\n      spotify.getMe().then(user => {\n        dispatch({\n          type:\"SET_USER\",\n          user:user\n        });\n      });\n\n      spotify.getUserPlaylists().then(playlists => {\n        dispatch({\n          type:\"SET_PLAYLISTS\",\n          playlists:playlists\n        })\n      });\n\n      spotify.getPlaylist('37i9dQZEVXcBSYpRDwxH9a').then(res => dispatch({type:\"SET_DW\", dw:res}))\n    }\n  });\n\n\n  return (\n    <div className=\"app\">\n      <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\" />\n      {token ? (<Player spotify={spotify}/>):(<Login/>)}\n    </div>\n  );\n}\n\nexport default App;\n","export const initialState = {\n    user:null,\n    playlists:[],\n    playing:false,\n    item:null,\n    token:null\n};\n\n\nconst reducer = (state, action) => {\n    console.log(action);\n\n    switch(action.type) {\n        case 'SET_USER':\n            return {\n                ...state,\n                user: action.user\n            };\n\n        case 'SET_TOKEN':\n            return {\n                ...state,\n                token:action.token\n            };\n\n        case 'SET_PLAYLISTS':\n            return {\n                ...state,\n                playlists:action.playlists\n            };\n\n        case 'SET_DW':\n            return {\n                ...state,\n                dw:action.dw\n            };\n\n        default:\n            return state;\n    }\n}\n\nexport default reducer;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {DataLayer} from './DataLayer';\nimport reducer, {initialState} from './reducer';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DataLayer initialState={initialState} reducer={reducer}>\n      <App/>\n    </DataLayer>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}